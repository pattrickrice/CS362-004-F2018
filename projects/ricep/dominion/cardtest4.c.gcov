        -:    0:Source:cardtest4.c
        -:    0:Graph:cardtest4.gcno
        -:    0:Data:cardtest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "utils.h"
        -:    2:#include "dominion.h"
        -:    3:
        -:    4:int testGardens();
        -:    5:
        -:    6:/******************************************************************************
        -:    7: * UnitTest for the gardens card function
        -:    8: *****************************************************************************/
        1:    9:int main()
        -:   10:{
        1:   11:    logV("[Starting cardtest4] - Testing the Gardens card in Dominion.c");
        1:   12:    int testsPassed = testGardens();
        1:   13:    logV("[cardtest4 RESULTS] ---------------------------------------------");
        1:   14:    printResults(1, testsPassed);
        1:   15:    logV("[Ending cardtest4] - Testing the Gardens card in Dominion.c\n\n");
        -:   16:}
        -:   17:
        -:   18:/******************************************************************************
        -:   19: * Test the council room card through the card effect function. The card effect
        -:   20: * should return the desired return code and the smithy card should alter the
        -:   21: * state of the game.
        -:   22: *****************************************************************************/
        1:   23:int testGardens()
        -:   24:{
        1:   25:    int totalTests = 0;
        1:   26:    int passedTests = 0;
        -:   27:
        -:   28:    // initalize variables needed for the card effect function
        1:   29:    int card = gardens;
        1:   30:    int choice1 = 0;
        1:   31:    int choice2 = 0;
        1:   32:    int choice3 = 0;
        1:   33:    struct gameState *state = newGame();
        1:   34:    int handPos = 0;
        1:   35:    int *bonus = malloc(sizeof(int));
        1:   36:    *bonus = 0;
        1:   37:    int player = 0;
        -:   38:
        -:   39:    // make the current card being played the smithy
        1:   40:    state->whoseTurn = player;
        1:   41:    state->hand[player][handPos] = gardens;
        1:   42:    state->handCount[player]++;
        1:   43:    state->deckCount[player] = MAX_DECK;
        -:   44:
        -:   45:    // assume the handcount from our set up is correct
        1:   46:    totalTests++;
        1:   47:    passedTests += assertTrue((state->handCount[player] == 1), "Player Hand count is 1");
        -:   48:
        -:   49:
        1:   50:    totalTests++;
        1:   51:    passedTests += assertEqual(
        -:   52:            cardEffect(card,
        -:   53:                       choice1,
        -:   54:                       choice2,
        -:   55:                       choice3,
        -:   56:                       state,
        -:   57:                       handPos,
        -:   58:                       bonus),
        -:   59:            -1,
        -:   60:            "cardEffect returns correct return code of -1");
        -:   61:
        1:   62:    return printResults(totalTests, passedTests);
        -:   63:}
