        -:    0:Source:cardtest3.c
        -:    0:Graph:cardtest3.gcno
        -:    0:Data:cardtest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "utils.h"
        -:    2:#include "dominion.h"
        -:    3:
        -:    4:int testCouncilRoom();
        -:    5:
        -:    6:/******************************************************************************
        -:    7: * UnitTest for the council room card function
        -:    8: *****************************************************************************/
        1:    9:int main()
        -:   10:{
        1:   11:    logV("[Starting cardtest3] - Testing the council room card in Dominion.c");
        1:   12:    int testsPassed = testCouncilRoom();
        1:   13:    logV("[cardtest3 RESULTS] ---------------------------------------------");
        1:   14:    printResults(1, testsPassed);
        1:   15:    logV("[Ending cardtest3] - Testing the council room card in Dominion.c\n\n");
        -:   16:}
        -:   17:
        -:   18:/******************************************************************************
        -:   19: * Test the council room card through the card effect function. The card effect
        -:   20: * should return the desired return code and the smithy card should alter the
        -:   21: * state of the game.
        -:   22: *****************************************************************************/
        1:   23:int testCouncilRoom()
        -:   24:{
        1:   25:    int totalTests = 0;
        1:   26:    int passedTests = 0;
        -:   27:
        -:   28:    // initalize variables needed for the card effect function
        1:   29:    int card = council_room;
        1:   30:    int choice1 = 0;
        1:   31:    int choice2 = 0;
        1:   32:    int choice3 = 0;
        1:   33:    struct gameState *state = newGame();
        1:   34:    int handPos = 0;
        1:   35:    int *bonus = malloc(sizeof(int));
        1:   36:    *bonus = 0;
        1:   37:    int player = 0;
        -:   38:
        -:   39:    // make the current card being played the smithy
        1:   40:    state->whoseTurn = player;
        1:   41:    state->hand[player][handPos] = council_room;
        1:   42:    state->handCount[player]++;
        1:   43:    state->numBuys = 0;
        1:   44:    state->numPlayers = 4;
        1:   45:    state->deckCount[player] = MAX_DECK;
        1:   46:    state->deckCount[player + 1] = MAX_DECK;
        1:   47:    state->deckCount[player + 2] = MAX_DECK;
        1:   48:    state->deckCount[player + 3] = MAX_DECK;
        -:   49:
        -:   50:
        -:   51:    // assume the handcount from our set up is correct
        1:   52:    totalTests++;
        1:   53:    passedTests += assertTrue((state->handCount[player] == 1), "Player Hand count is 1");
        -:   54:
        -:   55:    // test the function for the correct return code
        1:   56:    totalTests++;
        1:   57:    passedTests += assertEqual(state->numBuys, 0, "State numbuy is 0 before card");
        -:   58:
        1:   59:    totalTests++;
        1:   60:    passedTests += assertEqual(
        -:   61:            cardEffect(card,
        -:   62:                       choice1,
        -:   63:                       choice2,
        -:   64:                       choice3,
        -:   65:                       state,
        -:   66:                       handPos,
        -:   67:                       bonus),
        -:   68:            0,
        -:   69:            "cardEffect returns correct return code of 0");
        -:   70:
        -:   71:    // check the state of the game is altered.
        1:   72:    totalTests++;
        1:   73:    passedTests += assertEqual(state->numBuys, 1, "State numbuy is 1 after card");
        -:   74:
        1:   75:    totalTests++;
        1:   76:    passedTests += assertEqual(state->handCount[player], 4, "Player Hand count is 0");
        -:   77:
        1:   78:    totalTests++;
        1:   79:    passedTests += assertEqual(state->handCount[player + 1], 1, "Player2 Hand count is 1");
        -:   80:
        1:   81:    totalTests++;
        1:   82:    passedTests += assertEqual(state->handCount[player + 2], 1, "Player3 Hand count is 1");
        -:   83:
        1:   84:    totalTests++;
        1:   85:    passedTests += assertEqual(state->handCount[player + 3], 1, "Player4 Hand count is 1");
        1:   86:    return printResults(totalTests, passedTests);
        -:   87:}
