        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:8
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
    #####:    8:int compare(const void *a, const void *b) {
    #####:    9:    if (*(int *) a > *(int *) b)
    #####:   10:        return 1;
    #####:   11:    if (*(int *) a < *(int *) b)
    #####:   12:        return -1;
    #####:   13:    return 0;
        -:   14:}
        -:   15:
       11:   16:struct gameState *newGame() {
       11:   17:    struct gameState *g = malloc(sizeof(struct gameState));
       11:   18:    return g;
        -:   19:}
        -:   20:
    #####:   21:int *kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:                  int k8, int k9, int k10) {
    #####:   23:    int *k = malloc(10 * sizeof(int));
    #####:   24:    k[0] = k1;
    #####:   25:    k[1] = k2;
    #####:   26:    k[2] = k3;
    #####:   27:    k[3] = k4;
    #####:   28:    k[4] = k5;
    #####:   29:    k[5] = k6;
    #####:   30:    k[6] = k7;
    #####:   31:    k[7] = k8;
    #####:   32:    k[8] = k9;
    #####:   33:    k[9] = k10;
    #####:   34:    return k;
        -:   35:}
        -:   36:
    #####:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:                   struct gameState *state) {
        -:   39:
        -:   40:    int i;
        -:   41:    int j;
        -:   42:    int it;
        -:   43:    //set up random number generator
    #####:   44:    SelectStream(1);
    #####:   45:    PutSeed((long) randomSeed);
        -:   46:
        -:   47:    //check number of players
    #####:   48:    if (numPlayers > MAX_PLAYERS || numPlayers < 2) {
    #####:   49:        return -1;
        -:   50:    }
        -:   51:
        -:   52:    //set number of players
    #####:   53:    state->numPlayers = numPlayers;
        -:   54:
        -:   55:    //check selected kingdom cards are different
    #####:   56:    for (i = 0; i < 10; i++) {
    #####:   57:        for (j = 0; j < 10; j++) {
    #####:   58:            if (j != i && kingdomCards[j] == kingdomCards[i]) {
    #####:   59:                return -1;
        -:   60:            }
        -:   61:        }
        -:   62:    }
        -:   63:
        -:   64:
        -:   65:    //initialize supply
        -:   66:    ///////////////////////////////
        -:   67:
        -:   68:    //set number of Curse cards
    #####:   69:    if (numPlayers == 2) {
    #####:   70:        state->supplyCount[curse] = 10;
    #####:   71:    } else if (numPlayers == 3) {
    #####:   72:        state->supplyCount[curse] = 20;
        -:   73:    } else {
    #####:   74:        state->supplyCount[curse] = 30;
        -:   75:    }
        -:   76:
        -:   77:    //set number of Victory cards
    #####:   78:    if (numPlayers == 2) {
    #####:   79:        state->supplyCount[estate] = 8;
    #####:   80:        state->supplyCount[duchy] = 8;
    #####:   81:        state->supplyCount[province] = 8;
        -:   82:    } else {
    #####:   83:        state->supplyCount[estate] = 12;
    #####:   84:        state->supplyCount[duchy] = 12;
    #####:   85:        state->supplyCount[province] = 12;
        -:   86:    }
        -:   87:
        -:   88:    //set number of Treasure cards
    #####:   89:    state->supplyCount[copper] = 60 - (7 * numPlayers);
    #####:   90:    state->supplyCount[silver] = 40;
    #####:   91:    state->supplyCount[gold] = 30;
        -:   92:
        -:   93:    //set number of Kingdom cards
    #####:   94:    for (i = adventurer; i <= treasure_map; i++)        //loop all cards
        -:   95:    {
    #####:   96:        for (j = 0; j < 10; j++)                //loop chosen cards
        -:   97:        {
    #####:   98:            if (kingdomCards[j] == i) {
        -:   99:                //check if card is a 'Victory' Kingdom card
    #####:  100:                if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens) {
    #####:  101:                    if (numPlayers == 2) {
    #####:  102:                        state->supplyCount[i] = 8;
    #####:  103:                    } else { state->supplyCount[i] = 12; }
        -:  104:                } else {
    #####:  105:                    state->supplyCount[i] = 10;
        -:  106:                }
    #####:  107:                break;
        -:  108:            } else    //card is not in the set choosen for the game
        -:  109:            {
    #####:  110:                state->supplyCount[i] = -1;
        -:  111:            }
        -:  112:        }
        -:  113:
        -:  114:    }
        -:  115:
        -:  116:    ////////////////////////
        -:  117:    //supply intilization complete
        -:  118:
        -:  119:    //set player decks
    #####:  120:    for (i = 0; i < numPlayers; i++) {
    #####:  121:        state->deckCount[i] = 0;
    #####:  122:        for (j = 0; j < 3; j++) {
    #####:  123:            state->deck[i][j] = estate;
    #####:  124:            state->deckCount[i]++;
        -:  125:        }
    #####:  126:        for (j = 3; j < 10; j++) {
    #####:  127:            state->deck[i][j] = copper;
    #####:  128:            state->deckCount[i]++;
        -:  129:        }
        -:  130:    }
        -:  131:
        -:  132:    //shuffle player decks
    #####:  133:    for (i = 0; i < numPlayers; i++) {
    #####:  134:        if (shuffle(i, state) < 0) {
    #####:  135:            return -1;
        -:  136:        }
        -:  137:    }
        -:  138:
        -:  139:    //draw player hands
    #####:  140:    for (i = 0; i < numPlayers; i++) {
        -:  141:        //initialize hand size to zero
    #####:  142:        state->handCount[i] = 0;
    #####:  143:        state->discardCount[i] = 0;
        -:  144:        //draw 5 cards
        -:  145:        // for (j = 0; j < 5; j++)
        -:  146:        //	{
        -:  147:        //	  drawCard(i, state);
        -:  148:        //	}
        -:  149:    }
        -:  150:
        -:  151:    //set embargo tokens to 0 for all supply piles
    #####:  152:    for (i = 0; i <= treasure_map; i++) {
    #####:  153:        state->embargoTokens[i] = 0;
        -:  154:    }
        -:  155:
        -:  156:    //initialize first player's turn
    #####:  157:    state->outpostPlayed = 0;
    #####:  158:    state->phase = 0;
    #####:  159:    state->numActions = 1;
    #####:  160:    state->numBuys = 1;
    #####:  161:    state->playedCardCount = 0;
    #####:  162:    state->whoseTurn = 0;
    #####:  163:    state->handCount[state->whoseTurn] = 0;
        -:  164:    //int it; move to top
        -:  165:
        -:  166:    //Moved draw cards to here, only drawing at the start of a turn
    #####:  167:    for (it = 0; it < 5; it++) {
    #####:  168:        drawCard(state->whoseTurn, state);
        -:  169:    }
        -:  170:
    #####:  171:    updateCoins(state->whoseTurn, state, 0);
        -:  172:
    #####:  173:    return 0;
        -:  174:}
        -:  175:
    #####:  176:int shuffle(int player, struct gameState *state) {
        -:  177:
        -:  178:
        -:  179:    int newDeck[MAX_DECK];
    #####:  180:    int newDeckPos = 0;
        -:  181:    int card;
        -:  182:    int i;
        -:  183:
    #####:  184:    if (state->deckCount[player] < 1)
    #####:  185:        return -1;
    #####:  186:    qsort((void *) (state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  187:    /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  188:
    #####:  189:    while (state->deckCount[player] > 0) {
    #####:  190:        card = floor(Random() * state->deckCount[player]);
    #####:  191:        newDeck[newDeckPos] = state->deck[player][card];
    #####:  192:        newDeckPos++;
    #####:  193:        for (i = card; i < state->deckCount[player] - 1; i++) {
    #####:  194:            state->deck[player][i] = state->deck[player][i + 1];
        -:  195:        }
    #####:  196:        state->deckCount[player]--;
        -:  197:    }
    #####:  198:    for (i = 0; i < newDeckPos; i++) {
    #####:  199:        state->deck[player][i] = newDeck[i];
    #####:  200:        state->deckCount[player]++;
        -:  201:    }
        -:  202:
    #####:  203:    return 0;
        -:  204:}
        -:  205:
    #####:  206:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) {
        -:  207:    int card;
    #####:  208:    int coin_bonus = 0;        //tracks coins gain from actions
        -:  209:
        -:  210:    //check if it is the right phase
    #####:  211:    if (state->phase != 0) {
    #####:  212:        return -1;
        -:  213:    }
        -:  214:
        -:  215:    //check if player has enough actions
    #####:  216:    if (state->numActions < 1) {
    #####:  217:        return -1;
        -:  218:    }
        -:  219:
        -:  220:    //get card played
    #####:  221:    card = handCard(handPos, state);
        -:  222:
        -:  223:    //check if selected card is an action
    #####:  224:    if (card < adventurer || card > treasure_map) {
    #####:  225:        return -1;
        -:  226:    }
        -:  227:
        -:  228:    //play card
    #####:  229:    if (cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0) {
    #####:  230:        return -1;
        -:  231:    }
        -:  232:
        -:  233:    //reduce number of actions
    #####:  234:    state->numActions--;
        -:  235:
        -:  236:    //update coins (Treasure cards may be added with card draws)
    #####:  237:    updateCoins(state->whoseTurn, state, coin_bonus);
        -:  238:
    #####:  239:    return 0;
        -:  240:}
        -:  241:
    #####:  242:int buyCard(int supplyPos, struct gameState *state) {
        -:  243:    int who;
        -:  244:    if (DEBUG) {
        -:  245:        printf("Entering buyCard...\n");
        -:  246:    }
        -:  247:
        -:  248:    // I don't know what to do about the phase thing.
        -:  249:
    #####:  250:    who = state->whoseTurn;
        -:  251:
    #####:  252:    if (state->numBuys < 1) {
        -:  253:        if (DEBUG)
        -:  254:            printf("You do not have any buys left\n");
    #####:  255:        return -1;
    #####:  256:    } else if (supplyCount(supplyPos, state) < 1) {
        -:  257:        if (DEBUG)
        -:  258:            printf("There are not any of that type of card left\n");
    #####:  259:        return -1;
    #####:  260:    } else if (state->coins < getCost(supplyPos)) {
        -:  261:        if (DEBUG)
        -:  262:            printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  263:        return -1;
        -:  264:    } else {
    #####:  265:        state->phase = 1;
        -:  266:        //state->supplyCount[supplyPos]--;
    #####:  267:        gainCard(supplyPos, state, 0,
        -:  268:                 who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  269:
    #####:  270:        state->coins = (state->coins) - (getCost(supplyPos));
    #####:  271:        state->numBuys--;
        -:  272:        if (DEBUG)
        -:  273:            printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos,
        -:  274:                   getCost(supplyPos), state->numBuys, state->coins);
        -:  275:    }
        -:  276:
        -:  277:    //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  278:    //state->discardCount[who]++;
        -:  279:
    #####:  280:    return 0;
        -:  281:}
        -:  282:
    #####:  283:int numHandCards(struct gameState *state) {
    #####:  284:    return state->handCount[whoseTurn(state)];
        -:  285:}
        -:  286:
     2000:  287:int handCard(int handPos, struct gameState *state) {
     2000:  288:    int currentPlayer = whoseTurn(state);
     2000:  289:    return state->hand[currentPlayer][handPos];
        -:  290:}
        -:  291:
    #####:  292:int supplyCount(int card, struct gameState *state) {
    #####:  293:    return state->supplyCount[card];
        -:  294:}
        -:  295:
      112:  296:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  297:    int i;
      112:  298:    int count = 0;
        -:  299:
     1736:  300:    for (i = 0; i < state->deckCount[player]; i++) {
     1624:  301:        if (state->deck[player][i] == card) count++;
        -:  302:    }
        -:  303:
     1736:  304:    for (i = 0; i < state->handCount[player]; i++) {
     1624:  305:        if (state->hand[player][i] == card) count++;
        -:  306:    }
        -:  307:
     1736:  308:    for (i = 0; i < state->discardCount[player]; i++) {
     1624:  309:        if (state->discard[player][i] == card) count++;
        -:  310:    }
        -:  311:
      112:  312:    return count;
        -:  313:}
        -:  314:
     2011:  315:int whoseTurn(struct gameState *state) {
     2011:  316:    return state->whoseTurn;
        -:  317:}
        -:  318:
    #####:  319:int endTurn(struct gameState *state) {
        -:  320:    int k;
        -:  321:    int i;
    #####:  322:    int currentPlayer = whoseTurn(state);
        -:  323:
        -:  324:    //Discard hand
    #####:  325:    for (i = 0; i < state->handCount[currentPlayer]; i++) {
    #####:  326:        state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  327:        state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  328:    }
    #####:  329:    state->handCount[currentPlayer] = 0;//Reset hand count
        -:  330:
        -:  331:    //Code for determining the player
    #####:  332:    if (currentPlayer < (state->numPlayers - 1)) {
    #####:  333:        state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  334:    } else {
    #####:  335:        state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  336:    }
        -:  337:
    #####:  338:    state->outpostPlayed = 0;
    #####:  339:    state->phase = 0;
    #####:  340:    state->numActions = 1;
    #####:  341:    state->coins = 0;
    #####:  342:    state->numBuys = 1;
    #####:  343:    state->playedCardCount = 0;
    #####:  344:    state->handCount[state->whoseTurn] = 0;
        -:  345:
        -:  346:    //int k; move to top
        -:  347:    //Next player draws hand
    #####:  348:    for (k = 0; k < 5; k++) {
    #####:  349:        drawCard(state->whoseTurn, state);//Draw a card
        -:  350:    }
        -:  351:
        -:  352:    //Update money
    #####:  353:    updateCoins(state->whoseTurn, state, 0);
        -:  354:
    #####:  355:    return 0;
        -:  356:}
        -:  357:
        4:  358:int isGameOver(struct gameState *state) {
        -:  359:    int i;
        -:  360:    int j;
        -:  361:
        -:  362:    //if stack of Province cards is empty, the game ends
        4:  363:    if (state->supplyCount[province] == 0) {
        1:  364:        return 1;
        -:  365:    }
        -:  366:
        -:  367:    //if three supply pile are at 0, the game ends
        3:  368:    j = 0;
       78:  369:    for (i = 0; i < 25; i++) {
       75:  370:        if (state->supplyCount[i] == 0) {
        3:  371:            j++;
        -:  372:        }
        -:  373:    }
        3:  374:    if (j >= 3) {
        1:  375:        return 1;
        -:  376:    }
        -:  377:
        2:  378:    return 0;
        -:  379:}
        -:  380:
    #####:  381:int scoreFor(int player, struct gameState *state) {
        -:  382:
        -:  383:    int i;
    #####:  384:    int score = 0;
        -:  385:    //score from hand
    #####:  386:    for (i = 0; i < state->handCount[player]; i++) {
    #####:  387:        if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  388:        if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  389:        if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  390:        if (state->hand[player][i] == province) { score = score + 6; };
    #####:  391:        if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  392:        if (state->hand[player][i] == gardens) { score = score + (fullDeckCount(player, 0, state) / 10); };
        -:  393:    }
        -:  394:
        -:  395:    //score from discard
    #####:  396:    for (i = 0; i < state->discardCount[player]; i++) {
    #####:  397:        if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  398:        if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  399:        if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  400:        if (state->discard[player][i] == province) { score = score + 6; };
    #####:  401:        if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  402:        if (state->discard[player][i] == gardens) { score = score + (fullDeckCount(player, 0, state) / 10); };
        -:  403:    }
        -:  404:
        -:  405:    //score from deck
    #####:  406:    for (i = 0; i < state->discardCount[player]; i++) {
    #####:  407:        if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  408:        if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  409:        if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  410:        if (state->deck[player][i] == province) { score = score + 6; };
    #####:  411:        if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  412:        if (state->deck[player][i] == gardens) { score = score + (fullDeckCount(player, 0, state) / 10); };
        -:  413:    }
        -:  414:
    #####:  415:    return score;
        -:  416:}
        -:  417:
    #####:  418:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  419:    int i;
        -:  420:    int j;
        -:  421:    int highScore;
        -:  422:    int currentPlayer;
        -:  423:
        -:  424:    //get score for each player
    #####:  425:    for (i = 0; i < MAX_PLAYERS; i++) {
        -:  426:        //set unused player scores to -9999
    #####:  427:        if (i >= state->numPlayers) {
    #####:  428:            players[i] = -9999;
        -:  429:        } else {
    #####:  430:            players[i] = scoreFor(i, state);
        -:  431:        }
        -:  432:    }
        -:  433:
        -:  434:    //find highest score
    #####:  435:    j = 0;
    #####:  436:    for (i = 0; i < MAX_PLAYERS; i++) {
    #####:  437:        if (players[i] > players[j]) {
    #####:  438:            j = i;
        -:  439:        }
        -:  440:    }
    #####:  441:    highScore = players[j];
        -:  442:
        -:  443:    //add 1 to players who had less turns
    #####:  444:    currentPlayer = whoseTurn(state);
    #####:  445:    for (i = 0; i < MAX_PLAYERS; i++) {
    #####:  446:        if (players[i] == highScore && i > currentPlayer) {
    #####:  447:            players[i]++;
        -:  448:        }
        -:  449:    }
        -:  450:
        -:  451:    //find new highest score
    #####:  452:    j = 0;
    #####:  453:    for (i = 0; i < MAX_PLAYERS; i++) {
    #####:  454:        if (players[i] > players[j]) {
    #####:  455:            j = i;
        -:  456:        }
        -:  457:    }
    #####:  458:    highScore = players[j];
        -:  459:
        -:  460:    //set winners in array to 1 and rest to 0
    #####:  461:    for (i = 0; i < MAX_PLAYERS; i++) {
    #####:  462:        if (players[i] == highScore) {
    #####:  463:            players[i] = 1;
        -:  464:        } else {
    #####:  465:            players[i] = 0;
        -:  466:        }
        -:  467:    }
        -:  468:
    #####:  469:    return 0;
        -:  470:}
        -:  471:
     2004:  472:int drawCard(int player, struct gameState *state) {
        -:  473:    int count;
        -:  474:    int deckCounter;
     2004:  475:    if (state->deckCount[player] <= 0) {//Deck is empty
        -:  476:
        -:  477:        //Step 1 Shuffle the discard pile back into a deck
        -:  478:        int i;
        -:  479:        //Move discard to deck
    #####:  480:        for (i = 0; i < state->discardCount[player]; i++) {
    #####:  481:            state->deck[player][i] = state->discard[player][i];
    #####:  482:            state->discard[player][i] = -1;
        -:  483:        }
        -:  484:
    #####:  485:        state->deckCount[player] = state->discardCount[player];
    #####:  486:        state->discardCount[player] = 0;//Reset discard
        -:  487:
        -:  488:        //Shufffle the deck
    #####:  489:        shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  490:
        -:  491:        if (DEBUG) {//Debug statements
        -:  492:            printf("Deck count now: %d\n", state->deckCount[player]);
        -:  493:        }
        -:  494:
    #####:  495:        state->discardCount[player] = 0;
        -:  496:
        -:  497:        //Step 2 Draw Card
    #####:  498:        count = state->handCount[player];//Get current player's hand count
        -:  499:
        -:  500:        if (DEBUG) {//Debug statements
        -:  501:            printf("Current hand count: %d\n", count);
        -:  502:        }
        -:  503:
    #####:  504:        deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  505:
    #####:  506:        if (deckCounter == 0)
    #####:  507:            return -1;
        -:  508:
    #####:  509:        state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  510:        state->deckCount[player]--;
    #####:  511:        state->handCount[player]++;//Increment hand count
        -:  512:    } else {
     2004:  513:        int count = state->handCount[player];//Get current hand count for player
        -:  514:        int deckCounter;
        -:  515:        if (DEBUG) {//Debug statements
        -:  516:            printf("Current hand count: %d\n", count);
        -:  517:        }
        -:  518:
     2004:  519:        deckCounter = state->deckCount[player];//Create holder for the deck count
     2004:  520:        state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     2004:  521:        state->deckCount[player]--;
     2004:  522:        state->handCount[player]++;//Increment hand count
        -:  523:    }
        -:  524:
     2004:  525:    return 0;
        -:  526:}
        -:  527:
    #####:  528:int getCost(int cardNumber) {
    #####:  529:    switch (cardNumber) {
    #####:  530:        case curse:
    #####:  531:            return 0;
    #####:  532:        case estate:
    #####:  533:            return 2;
    #####:  534:        case duchy:
    #####:  535:            return 5;
    #####:  536:        case province:
    #####:  537:            return 8;
    #####:  538:        case copper:
    #####:  539:            return 0;
    #####:  540:        case silver:
    #####:  541:            return 3;
    #####:  542:        case gold:
    #####:  543:            return 6;
    #####:  544:        case adventurer:
    #####:  545:            return 6;
    #####:  546:        case council_room:
    #####:  547:            return 5;
    #####:  548:        case feast:
    #####:  549:            return 4;
    #####:  550:        case gardens:
    #####:  551:            return 4;
    #####:  552:        case mine:
    #####:  553:            return 5;
    #####:  554:        case remodel:
    #####:  555:            return 4;
    #####:  556:        case smithy:
    #####:  557:            return 4;
    #####:  558:        case village:
    #####:  559:            return 3;
    #####:  560:        case baron:
    #####:  561:            return 4;
    #####:  562:        case great_hall:
    #####:  563:            return 3;
    #####:  564:        case minion:
    #####:  565:            return 5;
    #####:  566:        case steward:
    #####:  567:            return 3;
    #####:  568:        case tribute:
    #####:  569:            return 5;
    #####:  570:        case ambassador:
    #####:  571:            return 3;
    #####:  572:        case cutpurse:
    #####:  573:            return 4;
    #####:  574:        case embargo:
    #####:  575:            return 2;
    #####:  576:        case outpost:
    #####:  577:            return 5;
    #####:  578:        case salvager:
    #####:  579:            return 4;
    #####:  580:        case sea_hag:
    #####:  581:            return 4;
    #####:  582:        case treasure_map:
    #####:  583:            return 4;
        -:  584:    }
        -:  585:
    #####:  586:    return -1;
        -:  587:}
        -:  588:
        7:  589:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus) {
        -:  590:    int i;
        -:  591:    int j;
        -:  592:    int k;
        -:  593:    int index;
        7:  594:    int currentPlayer = whoseTurn(state);
        7:  595:    int nextPlayer = currentPlayer + 1;
        -:  596:
        7:  597:    int tributeRevealedCards[2] = {-1, -1};
        -:  598:    int temphand[MAX_HAND];// moved above the if statement
        7:  599:    int drawntreasure = 0;
        7:  600:    if (nextPlayer > (state->numPlayers - 1)) {
        6:  601:        nextPlayer = 0;
        -:  602:    }
        -:  603:
        -:  604:
        -:  605:    //uses switch to select card and perform actions
        7:  606:    switch (card) {
        4:  607:        case adventurer:
        4:  608:            return cardAdventurer(
        -:  609:                    drawntreasure,
        -:  610:                    state,
        -:  611:                    currentPlayer,
        -:  612:                    temphand);
        -:  613:
        1:  614:        case council_room:
        1:  615:            return cardCouncilRoom(handPos, state, currentPlayer);
        -:  616:
    #####:  617:        case feast:
    #####:  618:            return cardFeast(
        -:  619:            state,
        -:  620:            currentPlayer,
        -:  621:            temphand,
        -:  622:            choice1);
        -:  623:
        1:  624:        case gardens:
        1:  625:            return cardGardens();
        -:  626:
    #####:  627:        case mine:
    #####:  628:            j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  629:
    #####:  630:            if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold) {
    #####:  631:                return -1;
        -:  632:            }
        -:  633:
    #####:  634:            if (choice2 > treasure_map || choice2 < curse) {
    #####:  635:                return -1;
        -:  636:            }
        -:  637:
    #####:  638:            if ((getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2)) {
    #####:  639:                return -1;
        -:  640:            }
        -:  641:
    #####:  642:            gainCard(choice2, state, 2, currentPlayer);
        -:  643:
        -:  644:            //discard card from hand
    #####:  645:            discardCard(handPos, currentPlayer, state, 0);
        -:  646:
        -:  647:            //discard trashed card
    #####:  648:            for (i = 0; i < state->handCount[currentPlayer]; i++) {
    #####:  649:                if (state->hand[currentPlayer][i] == j) {
    #####:  650:                    discardCard(i, currentPlayer, state, 0);
    #####:  651:                    break;
        -:  652:                }
        -:  653:            }
        -:  654:
    #####:  655:            return 0;
        -:  656:
    #####:  657:        case remodel:
    #####:  658:            j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  659:
    #####:  660:            if ((getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2)) {
    #####:  661:                return -1;
        -:  662:            }
        -:  663:
    #####:  664:            gainCard(choice2, state, 0, currentPlayer);
        -:  665:
        -:  666:            //discard card from hand
    #####:  667:            discardCard(handPos, currentPlayer, state, 0);
        -:  668:
        -:  669:            //discard trashed card
    #####:  670:            for (i = 0; i < state->handCount[currentPlayer]; i++) {
    #####:  671:                if (state->hand[currentPlayer][i] == j) {
    #####:  672:                    discardCard(i, currentPlayer, state, 0);
    #####:  673:                    break;
        -:  674:                }
        -:  675:            }
        -:  676:
        -:  677:
    #####:  678:            return 0;
        -:  679:
        1:  680:        case smithy:
        1:  681:            return cardSmithy(handPos, currentPlayer, state);
        -:  682:
    #####:  683:        case village:
        -:  684:            //+1 Card
    #####:  685:            drawCard(currentPlayer, state);
        -:  686:
        -:  687:            //+2 Actions
    #####:  688:            state->numActions = state->numActions + 2;
        -:  689:
        -:  690:            //discard played card from hand
    #####:  691:            discardCard(handPos, currentPlayer, state, 0);
    #####:  692:            return 0;
        -:  693:
    #####:  694:        case baron:
    #####:  695:            state->numBuys++;//Increase buys by 1!
    #####:  696:            if (choice1 > 0) {//Boolean true or going to discard an estate
    #####:  697:                int p = 0;//Iterator for hand!
    #####:  698:                int card_not_discarded = 1;//Flag for discard set!
    #####:  699:                while (card_not_discarded) {
    #####:  700:                    if (state->hand[currentPlayer][p] == estate) {//Found an estate card!
    #####:  701:                        state->coins += 4;//Add 4 coins to the amount of coins
    #####:  702:                        state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  703:                        state->discardCount[currentPlayer]++;
    #####:  704:                        for (; p < state->handCount[currentPlayer]; p++) {
    #####:  705:                            state->hand[currentPlayer][p] = state->hand[currentPlayer][p + 1];
        -:  706:                        }
    #####:  707:                        state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  708:                        state->handCount[currentPlayer]--;
    #####:  709:                        card_not_discarded = 0;//Exit the loop
    #####:  710:                    } else if (p > state->handCount[currentPlayer]) {
        -:  711:                        if (DEBUG) {
        -:  712:                            printf("No estate cards in your hand, invalid choice\n");
        -:  713:                            printf("Must gain an estate if there are any\n");
        -:  714:                        }
    #####:  715:                        if (supplyCount(estate, state) > 0) {
    #####:  716:                            gainCard(estate, state, 0, currentPlayer);
    #####:  717:                            state->supplyCount[estate]--;//Decrement estates
    #####:  718:                            if (supplyCount(estate, state) == 0) {
    #####:  719:                                isGameOver(state);
        -:  720:                            }
        -:  721:                        }
    #####:  722:                        card_not_discarded = 0;//Exit the loop
        -:  723:                    } else {
    #####:  724:                        p++;//Next card
        -:  725:                    }
        -:  726:                }
        -:  727:            } else {
    #####:  728:                if (supplyCount(estate, state) > 0) {
    #####:  729:                    gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  730:                    state->supplyCount[estate]--;//Decrement Estates
    #####:  731:                    if (supplyCount(estate, state) == 0) {
    #####:  732:                        isGameOver(state);
        -:  733:                    }
        -:  734:                }
        -:  735:            }
        -:  736:
        -:  737:
    #####:  738:            return 0;
        -:  739:
    #####:  740:        case great_hall:
        -:  741:            //+1 Card
    #####:  742:            drawCard(currentPlayer, state);
        -:  743:
        -:  744:            //+1 Actions
    #####:  745:            state->numActions++;
        -:  746:
        -:  747:            //discard card from hand
    #####:  748:            discardCard(handPos, currentPlayer, state, 0);
    #####:  749:            return 0;
        -:  750:
    #####:  751:        case minion:
        -:  752:            //+1 action
    #####:  753:            state->numActions++;
        -:  754:
        -:  755:            //discard card from hand
    #####:  756:            discardCard(handPos, currentPlayer, state, 0);
        -:  757:
    #####:  758:            if (choice1)        //+2 coins
        -:  759:            {
    #####:  760:                state->coins = state->coins + 2;
    #####:  761:            } else if (choice2)        //discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  762:            {
        -:  763:                //discard hand
    #####:  764:                while (numHandCards(state) > 0) {
    #####:  765:                    discardCard(handPos, currentPlayer, state, 0);
        -:  766:                }
        -:  767:
        -:  768:                //draw 4
    #####:  769:                for (i = 0; i < 4; i++) {
    #####:  770:                    drawCard(currentPlayer, state);
        -:  771:                }
        -:  772:
        -:  773:                //other players discard hand and redraw if hand size > 4
    #####:  774:                for (i = 0; i < state->numPlayers; i++) {
    #####:  775:                    if (i != currentPlayer) {
    #####:  776:                        if (state->handCount[i] > 4) {
        -:  777:                            //discard hand
    #####:  778:                            while (state->handCount[i] > 0) {
    #####:  779:                                discardCard(handPos, i, state, 0);
        -:  780:                            }
        -:  781:
        -:  782:                            //draw 4
    #####:  783:                            for (j = 0; j < 4; j++) {
    #####:  784:                                drawCard(i, state);
        -:  785:                            }
        -:  786:                        }
        -:  787:                    }
        -:  788:                }
        -:  789:
        -:  790:            }
    #####:  791:            return 0;
        -:  792:
    #####:  793:        case steward:
    #####:  794:            if (choice1 == 1) {
        -:  795:                //+2 cards
    #####:  796:                drawCard(currentPlayer, state);
    #####:  797:                drawCard(currentPlayer, state);
    #####:  798:            } else if (choice1 == 2) {
        -:  799:                //+2 coins
    #####:  800:                state->coins = state->coins + 2;
        -:  801:            } else {
        -:  802:                //trash 2 cards in hand
    #####:  803:                discardCard(choice2, currentPlayer, state, 1);
    #####:  804:                discardCard(choice3, currentPlayer, state, 1);
        -:  805:            }
        -:  806:
        -:  807:            //discard card from hand
    #####:  808:            discardCard(handPos, currentPlayer, state, 0);
    #####:  809:            return 0;
        -:  810:
    #####:  811:        case tribute:
    #####:  812:            if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1) {
    #####:  813:                if (state->deckCount[nextPlayer] > 0) {
    #####:  814:                    tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####:  815:                    state->deckCount[nextPlayer]--;
    #####:  816:                } else if (state->discardCount[nextPlayer] > 0) {
    #####:  817:                    tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer] - 1];
    #####:  818:                    state->discardCount[nextPlayer]--;
        -:  819:                } else {
        -:  820:                    //No Card to Reveal
        -:  821:                    if (DEBUG) {
        -:  822:                        printf("No cards to reveal\n");
        -:  823:                    }
        -:  824:                }
        -:  825:            } else {
    #####:  826:                if (state->deckCount[nextPlayer] == 0) {
    #####:  827:                    for (i = 0; i < state->discardCount[nextPlayer]; i++) {
    #####:  828:                        state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  829:                        state->deckCount[nextPlayer]++;
    #####:  830:                        state->discard[nextPlayer][i] = -1;
    #####:  831:                        state->discardCount[nextPlayer]--;
        -:  832:                    }
        -:  833:
    #####:  834:                    shuffle(nextPlayer, state);//Shuffle the deck
        -:  835:                }
    #####:  836:                tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####:  837:                state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  838:                state->deckCount[nextPlayer]--;
    #####:  839:                tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####:  840:                state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  841:                state->deckCount[nextPlayer]--;
        -:  842:            }
        -:  843:
    #####:  844:            if (tributeRevealedCards[0] == tributeRevealedCards[1]) {//If we have a duplicate card, just drop one
    #####:  845:                state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  846:                state->playedCardCount++;
    #####:  847:                tributeRevealedCards[1] = -1;
        -:  848:            }
        -:  849:
    #####:  850:            for (i = 0; i <= 2; i++) {
    #####:  851:                if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver ||
    #####:  852:                    tributeRevealedCards[i] == gold) {//Treasure cards
    #####:  853:                    state->coins += 2;
    #####:  854:                } else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy ||
    #####:  855:                           tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens ||
    #####:  856:                           tributeRevealedCards[i] == great_hall) {//Victory Card Found
    #####:  857:                    drawCard(currentPlayer, state);
    #####:  858:                    drawCard(currentPlayer, state);
        -:  859:                } else {//Action Card
    #####:  860:                    state->numActions = state->numActions + 2;
        -:  861:                }
        -:  862:            }
        -:  863:
    #####:  864:            return 0;
        -:  865:
    #####:  866:        case ambassador:
    #####:  867:            j = 0;        //used to check if player has enough cards to discard
        -:  868:
    #####:  869:            if (choice2 > 2 || choice2 < 0) {
    #####:  870:                return -1;
        -:  871:            }
        -:  872:
    #####:  873:            if (choice1 == handPos) {
    #####:  874:                return -1;
        -:  875:            }
        -:  876:
    #####:  877:            for (i = 0; i < state->handCount[currentPlayer]; i++) {
    #####:  878:                if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1) {
    #####:  879:                    j++;
        -:  880:                }
        -:  881:            }
    #####:  882:            if (j < choice2) {
    #####:  883:                return -1;
        -:  884:            }
        -:  885:
        -:  886:            if (DEBUG)
        -:  887:                printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  888:
        -:  889:            //increase supply count for choosen card by amount being discarded
    #####:  890:            state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  891:
        -:  892:            //each other player gains a copy of revealed card
    #####:  893:            for (i = 0; i < state->numPlayers; i++) {
    #####:  894:                if (i != currentPlayer) {
    #####:  895:                    gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -:  896:                }
        -:  897:            }
        -:  898:
        -:  899:            //discard played card from hand
    #####:  900:            discardCard(handPos, currentPlayer, state, 0);
        -:  901:
        -:  902:            //trash copies of cards returned to supply
    #####:  903:            for (j = 0; j < choice2; j++) {
    #####:  904:                for (i = 0; i < state->handCount[currentPlayer]; i++) {
    #####:  905:                    if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1]) {
    #####:  906:                        discardCard(i, currentPlayer, state, 1);
    #####:  907:                        break;
        -:  908:                    }
        -:  909:                }
        -:  910:            }
        -:  911:
    #####:  912:            return 0;
        -:  913:
    #####:  914:        case cutpurse:
        -:  915:
    #####:  916:            updateCoins(currentPlayer, state, 2);
    #####:  917:            for (i = 0; i < state->numPlayers; i++) {
    #####:  918:                if (i != currentPlayer) {
    #####:  919:                    for (j = 0; j < state->handCount[i]; j++) {
    #####:  920:                        if (state->hand[i][j] == copper) {
    #####:  921:                            discardCard(j, i, state, 0);
    #####:  922:                            break;
        -:  923:                        }
    #####:  924:                        if (j == state->handCount[i]) {
    #####:  925:                            for (k = 0; k < state->handCount[i]; k++) {
        -:  926:                                if (DEBUG)
        -:  927:                                    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -:  928:                            }
    #####:  929:                            break;
        -:  930:                        }
        -:  931:                    }
        -:  932:
        -:  933:                }
        -:  934:
        -:  935:            }
        -:  936:
        -:  937:            //discard played card from hand
    #####:  938:            discardCard(handPos, currentPlayer, state, 0);
        -:  939:
    #####:  940:            return 0;
        -:  941:
        -:  942:
    #####:  943:        case embargo:
        -:  944:            //+2 Coins
    #####:  945:            state->coins = state->coins + 2;
        -:  946:
        -:  947:            //see if selected pile is in play
    #####:  948:            if (state->supplyCount[choice1] == -1) {
    #####:  949:                return -1;
        -:  950:            }
        -:  951:
        -:  952:            //add embargo token to selected supply pile
    #####:  953:            state->embargoTokens[choice1]++;
        -:  954:
        -:  955:            //trash card
    #####:  956:            discardCard(handPos, currentPlayer, state, 1);
    #####:  957:            return 0;
        -:  958:
    #####:  959:        case outpost:
        -:  960:            //set outpost flag
    #####:  961:            state->outpostPlayed++;
        -:  962:
        -:  963:            //discard card
    #####:  964:            discardCard(handPos, currentPlayer, state, 0);
    #####:  965:            return 0;
        -:  966:
    #####:  967:        case salvager:
        -:  968:            //+1 buy
    #####:  969:            state->numBuys++;
        -:  970:
    #####:  971:            if (choice1) {
        -:  972:                //gain coins equal to trashed card
    #####:  973:                state->coins = state->coins + getCost(handCard(choice1, state));
        -:  974:                //trash card
    #####:  975:                discardCard(choice1, currentPlayer, state, 1);
        -:  976:            }
        -:  977:
        -:  978:            //discard card
    #####:  979:            discardCard(handPos, currentPlayer, state, 0);
    #####:  980:            return 0;
        -:  981:
    #####:  982:        case sea_hag:
    #####:  983:            for (i = 0; i < state->numPlayers; i++) {
    #####:  984:                if (i != currentPlayer) {
    #####:  985:                    state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
    #####:  986:                    state->deckCount[i]--;
    #####:  987:                    state->discardCount[i]++;
    #####:  988:                    state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -:  989:                }
        -:  990:            }
    #####:  991:            return 0;
        -:  992:
    #####:  993:        case treasure_map:
        -:  994:            //search hand for another treasure_map
    #####:  995:            index = -1;
    #####:  996:            for (i = 0; i < state->handCount[currentPlayer]; i++) {
    #####:  997:                if (state->hand[currentPlayer][i] == treasure_map && i != handPos) {
    #####:  998:                    index = i;
    #####:  999:                    break;
        -: 1000:                }
        -: 1001:            }
    #####: 1002:            if (index > -1) {
        -: 1003:                //trash both treasure cards
    #####: 1004:                discardCard(handPos, currentPlayer, state, 1);
    #####: 1005:                discardCard(index, currentPlayer, state, 1);
        -: 1006:
        -: 1007:                //gain 4 Gold cards
    #####: 1008:                for (i = 0; i < 4; i++) {
    #####: 1009:                    gainCard(gold, state, 1, currentPlayer);
        -: 1010:                }
        -: 1011:
        -: 1012:                //return success
    #####: 1013:                return 1;
        -: 1014:            }
        -: 1015:
        -: 1016:            //no second treasure_map found in hand
    #####: 1017:            return -1;
        -: 1018:    }
        -: 1019:
    #####: 1020:    return -1;
        -: 1021:}
        -: 1022:
        4: 1023:int cardAdventurer(
        -: 1024:        int drawntreasure,
        -: 1025:        struct gameState *state,
        -: 1026:        int currentPlayer,
        -: 1027:        int *temphand) {
        -: 1028:
        4: 1029:    int cardDrawn, temphandCounter = 0;
     2001: 1030:    while (drawntreasure < 2) {
     1993: 1031:        if (state->deckCount[currentPlayer] < 1) {
        -: 1032:            // if the deck is empty we need to shuffle discard and add to
        -: 1033:            // deck
    #####: 1034:            shuffle(currentPlayer, state);
        -: 1035:        }
     1993: 1036:        drawCard(currentPlayer, state);
        -: 1037:
        -: 1038:        // top card of hand is most recently drawn card.
     1993: 1039:        cardDrawn = state->hand[currentPlayer]
     1993: 1040:                [state->handCount[currentPlayer] - 1];
        -: 1041:
     1993: 1042:        if (cardDrawn == copper ||
     1989: 1043:        cardDrawn == silver ||
        -: 1044:        cardDrawn == gold)
        8: 1045:            drawntreasure++;
        -: 1046:        else {
     1985: 1047:            temphand[temphandCounter] = cardDrawn;
        -: 1048:
        -: 1049:            // this should just remove the top card (the most recently
        -: 1050:            // drawn one).
        -: 1051:            state->handCount[currentPlayer];
     1985: 1052:            temphandCounter = temphandCounter + 1;
        -: 1053:        }
        -: 1054:    }
        -: 1055:
     1993: 1056:    while (temphandCounter - 1 >= 0) {
        -: 1057:        // discard all cards in play that have been drawn
     3970: 1058:        state->discard[currentPlayer][state->discardCount[currentPlayer]++] =
     3970: 1059:                temphand[temphandCounter - 1];
     1985: 1060:        temphandCounter = temphandCounter - 1;
        -: 1061:    }
        4: 1062:    return 0;
        -: 1063:}
        -: 1064:
        1: 1065:int cardCouncilRoom(int handPos, struct gameState *state, int currentPlayer){
        -: 1066:    // +4 Cards
        1: 1067:    int index = 0;
        5: 1068:    for (index = 0; index < 4; index++) {
        4: 1069:        drawCard(currentPlayer, state);
        -: 1070:    }
        -: 1071:
        -: 1072:    // +1 Buy
        1: 1073:    state->numBuys++;
        -: 1074:
        -: 1075:    // Each other player draws a card
        5: 1076:    for (index = 0; index < state->numPlayers; index++) {
        4: 1077:        if (index != currentPlayer) {
        3: 1078:            drawCard(index, state);
        -: 1079:        }
        -: 1080:    }
        -: 1081:
        -: 1082:    // put played card in played card pile
        1: 1083:    discardCard(handPos, currentPlayer, state, 0);
        1: 1084:}
        -: 1085:
    #####: 1086:int cardFeast(
        -: 1087:        struct gameState *state,
        -: 1088:        int currentPlayer,
        -: 1089:        int *temphand,
        -: 1090:        int choice1){
        -: 1091:    // gain card with cost up to 5
        -: 1092:    // Backup hand
    #####: 1093:    int index, continue_loop = 0;
    #####: 1094:    for (index = 0; index <= state->handCount[currentPlayer]; index++) {
    #####: 1095:        temphand[index] = state->hand[currentPlayer][index];// Backup card
    #####: 1096:        state->hand[currentPlayer][index] = -1;// Set to nothing
        -: 1097:    }
        -: 1098:    //Backup hand
        -: 1099:
        -: 1100:    // Update Coins for Buy
    #####: 1101:    updateCoins(currentPlayer, state, 5);
        -: 1102:
        -: 1103:    // Condition to loop on
    #####: 1104:    continue_loop = 1;
    #####: 1105:    while (continue_loop == 1) {
        -: 1106:        // Buy one card
    #####: 1107:        if (supplyCount(choice1, state) <= 0) {
        -: 1108:            if (DEBUG)
        -: 1109:                printf("None of that card left, sorry!\n");
        -: 1110:
        -: 1111:            if (DEBUG) {
        -: 1112:                printf("Cards Left: %d\n", supplyCount(choice1, state));
        -: 1113:            }
    #####: 1114:        } else if (state->coins < getCost(choice1)) {
    #####: 1115:            printf("That card is too expensive!\n");
        -: 1116:
        -: 1117:            if (DEBUG) {
        -: 1118:                printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -: 1119:            }
        -: 1120:        } else {
        -: 1121:
        -: 1122:            if (DEBUG) {
        -: 1123:                printf("Deck Count: %d\n",
        -: 1124:                        state->handCount[currentPlayer]
        -: 1125:                        + state->deckCount[currentPlayer]
        -: 1126:                        + state->discardCount[currentPlayer]);
        -: 1127:            }
        -: 1128:
    #####: 1129:            gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####: 1130:            continue_loop = 0;//No more buying cards
        -: 1131:
        -: 1132:            if (DEBUG) {
        -: 1133:                printf("Deck Count: %d\n",
        -: 1134:                        state->handCount[currentPlayer]
        -: 1135:                        + state->deckCount[currentPlayer]
        -: 1136:                        + state->discardCount[currentPlayer]);
        -: 1137:            }
        -: 1138:
        -: 1139:        }
        -: 1140:    }
        -: 1141:
        -: 1142:    // Reset Hand
    #####: 1143:    for (index = 0; index <= state->handCount[currentPlayer]; index++) {
    #####: 1144:        state->hand[currentPlayer][index] = temphand[index];
    #####: 1145:        temphand[index] = -2;
        -: 1146:    }
        -: 1147:
        -: 1148:    // Reset Hand
    #####: 1149:    return 0;
        -: 1150:}
        -: 1151:
        1: 1152:int cardGardens(){
        1: 1153:    return -2;
        -: 1154:}
        -: 1155:
        1: 1156:int cardSmithy(int handPos, int currentPlayer, struct gameState *state){
        -: 1157:    // +3 Cards
        1: 1158:    int index = 0;
        5: 1159:    for (index = 0; index < 4; index++) {
        4: 1160:        drawCard(currentPlayer, state);
        -: 1161:    }
        -: 1162:
        -: 1163:    // discard card from hand
        1: 1164:    discardCard(handPos, currentPlayer, state, 0);
        1: 1165:    return 0;
        -: 1166:}
        -: 1167:
        2: 1168:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag) {
        -: 1169:
        -: 1170:    //if card is not trashed, added to Played pile
        2: 1171:    if (trashFlag < 1) {
        -: 1172:        //add card to played pile
        2: 1173:        state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
        2: 1174:        state->playedCardCount++;
        -: 1175:    }
        -: 1176:
        -: 1177:    //set played card to -1
        2: 1178:    state->hand[currentPlayer][handPos] = -1;
        -: 1179:
        -: 1180:    //remove card from player's hand
        2: 1181:    if (handPos == (state->handCount[currentPlayer] - 1))    //last card in hand array is played
        -: 1182:    {
        -: 1183:        //reduce number of cards in hand
    #####: 1184:        state->handCount[currentPlayer]--;
        2: 1185:    } else if (state->handCount[currentPlayer] == 1) //only one card in hand
        -: 1186:    {
        -: 1187:        //reduce number of cards in hand
    #####: 1188:        state->handCount[currentPlayer]--;
        -: 1189:    } else {
        -: 1190:        //replace discarded card with last card in hand
        2: 1191:        state->hand[currentPlayer][handPos] = state->hand[currentPlayer][(state->handCount[currentPlayer] - 1)];
        -: 1192:        //set last card to -1
        2: 1193:        state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1194:        //reduce number of cards in hand
        2: 1195:        state->handCount[currentPlayer]--;
        -: 1196:    }
        -: 1197:
        2: 1198:    return 0;
        -: 1199:}
        -: 1200:
    #####: 1201:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player) {
        -: 1202:    //Note: supplyPos is enum of choosen card
        -: 1203:
        -: 1204:    //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1205:    if (supplyCount(supplyPos, state) < 1) {
    #####: 1206:        return -1;
        -: 1207:    }
        -: 1208:
        -: 1209:    //added card for [whoseTurn] current player:
        -: 1210:    // toFlag = 0 : add to discard
        -: 1211:    // toFlag = 1 : add to deck
        -: 1212:    // toFlag = 2 : add to hand
        -: 1213:
    #####: 1214:    if (toFlag == 1) {
    #####: 1215:        state->deck[player][state->deckCount[player]] = supplyPos;
    #####: 1216:        state->deckCount[player]++;
    #####: 1217:    } else if (toFlag == 2) {
    #####: 1218:        state->hand[player][state->handCount[player]] = supplyPos;
    #####: 1219:        state->handCount[player]++;
        -: 1220:    } else {
    #####: 1221:        state->discard[player][state->discardCount[player]] = supplyPos;
    #####: 1222:        state->discardCount[player]++;
        -: 1223:    }
        -: 1224:
        -: 1225:    //decrease number in supply pile
    #####: 1226:    state->supplyCount[supplyPos]--;
        -: 1227:
    #####: 1228:    return 0;
        -: 1229:}
        -: 1230:
    #####: 1231:int updateCoins(int player, struct gameState *state, int bonus) {
        -: 1232:    int i;
        -: 1233:
        -: 1234:    //reset coin count
    #####: 1235:    state->coins = 0;
        -: 1236:
        -: 1237:    //add coins for each Treasure card in player's hand
    #####: 1238:    for (i = 0; i < state->handCount[player]; i++) {
    #####: 1239:        if (state->hand[player][i] == copper) {
    #####: 1240:            state->coins += 1;
    #####: 1241:        } else if (state->hand[player][i] == silver) {
    #####: 1242:            state->coins += 2;
    #####: 1243:        } else if (state->hand[player][i] == gold) {
    #####: 1244:            state->coins += 3;
        -: 1245:        }
        -: 1246:    }
        -: 1247:
        -: 1248:    //add bonus
    #####: 1249:    state->coins += bonus;
        -: 1250:
    #####: 1251:    return 0;
        -: 1252:}
        -: 1253:
        -: 1254:
        -: 1255://end of dominion.c
        -: 1256:
