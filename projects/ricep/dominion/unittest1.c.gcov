        -:    0:Source:unittest1.c
        -:    0:Graph:unittest1.gcno
        -:    0:Data:unittest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "utils.h"
        -:    2:#include "dominion.h"
        -:    3:
        -:    4:int testPlayerTurn();
        -:    5:
        -:    6:/******************************************************************************
        -:    7: * UnitTest for the whoseTurn function
        -:    8: *****************************************************************************/
        1:    9:int main(){
        1:   10:    logV("[Starting unittest1] - Testing the whoseTurn Function in Dominion.c");
        1:   11:    int testsPassed = testPlayerTurn();
        1:   12:    logV("[UNITTEST 1 RESULTS] ---------------------------------------------");
        1:   13:    printResults(1, testsPassed);
        1:   14:    logV("[Ending unittest1] - Testing the whoseTurn Function in Dominion.c\n\n");
        -:   15:
        -:   16:}
        -:   17:
        -:   18:/******************************************************************************
        -:   19: * Loop though maximum recommended number of players for the game, and check
        -:   20: * that the function returns that it is their turn.
        -:   21: *****************************************************************************/
        1:   22:int testPlayerTurn(){
        -:   23:    struct gameState state;
        1:   24:    int totalTests = 0;
        1:   25:    int passedTests = 0;
        5:   26:    for (int i = 0; i < MAX_PLAYERS; i ++){
        -:   27:        char message[100];
        4:   28:        sprintf(message, "Testing that is is player %d's turn", i);
        4:   29:        state.whoseTurn = i;
        4:   30:        totalTests++;
        4:   31:        passedTests += assertTrue((whoseTurn(&state) == i), message);
        -:   32:    }
        1:   33:    return printResults(totalTests, passedTests);
        -:   34:}
