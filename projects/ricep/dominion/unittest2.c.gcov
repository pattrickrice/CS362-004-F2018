        -:    0:Source:unittest2.c
        -:    0:Graph:unittest2.gcno
        -:    0:Data:unittest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "utils.h"
        -:    2:#include "dominion.h"
        -:    3:
        -:    4:int testNoProvince();
        -:    5:int testThreeSupplyPilesAtZero();
        -:    6:/******************************************************************************
        -:    7: * UnitTest for the isGameOver function
        -:    8: *****************************************************************************/
        1:    9:int main(){
        1:   10:    int totalTests = 2;
        1:   11:    int totalPassed = 0;
        1:   12:    logV("[Starting unittest2] - Testing the isGameOver Function in Dominion.c");
        1:   13:    totalPassed += testNoProvince();
        1:   14:    totalPassed += testThreeSupplyPilesAtZero();
        1:   15:    logV("[RESULTS unittest2] ----------------------------------------------");
        1:   16:    printResults(totalTests, totalPassed);
        1:   17:    logV("[Ending unittest2] - Testing the isGameOver Function in Dominion.c\n\n");
        -:   18:}
        -:   19:
        1:   20:int testNoProvince(){
        1:   21:    struct gameState *state = newGame();
        1:   22:    state->supplyCount[province] = 1;
        1:   23:    int total = 0;
        1:   24:    int testsPassed = 0;
        -:   25:
        -:   26:    // set supply counts to 1
        1:   27:    int i = 0;
       26:   28:    for (i = 0; i < 25; i++)
        -:   29:    {
       25:   30:        state->supplyCount[i] = 1;
        -:   31:    }
        -:   32:
        1:   33:    char *message = "All supply piles at 1 returns a 0";
        1:   34:    total++;
        1:   35:    testsPassed += assertTrue((isGameOver(state) == 0), message);
        -:   36:
        1:   37:    message = "No provinces left returns a 1";
        1:   38:    state->supplyCount[province] = 0;
        -:   39:
        1:   40:    total++;
        1:   41:    testsPassed += assertTrue((isGameOver(state) == 1), message);
        1:   42:    free(state);
        -:   43:
        1:   44:    return printResults(total, testsPassed);
        -:   45:}
        -:   46:
        1:   47:int testThreeSupplyPilesAtZero(){
        1:   48:    struct gameState *state = newGame();
        1:   49:    int total = 0, testsPassed = 0;
        -:   50:    // set supply counts to 1
        1:   51:    int i = 0;
       26:   52:    for (i = 0; i < 25; i++)
        -:   53:    {
       25:   54:        state->supplyCount[i] = 1;
        -:   55:    }
        -:   56:
        1:   57:    char *message = "All supply piles at 1 returns a 0";
        1:   58:    total++;
        1:   59:    testsPassed += assertTrue((isGameOver(state) == 0), message);
        -:   60:
        1:   61:    state->supplyCount[0] = 0;
        1:   62:    state->supplyCount[1] = 0;
        1:   63:    state->supplyCount[2] = 0;
        -:   64:
        1:   65:    message = "Three supply Piles at 0 returns a 1";
        -:   66:
        1:   67:    total++;
        1:   68:    testsPassed += assertTrue((isGameOver(state) == 1), message);
        1:   69:    free(state);
        1:   70:    return printResults(total, testsPassed);
        -:   71:
        -:   72:}
        -:   73:
