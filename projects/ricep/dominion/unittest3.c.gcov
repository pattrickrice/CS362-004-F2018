        -:    0:Source:unittest3.c
        -:    0:Graph:unittest3.gcno
        -:    0:Data:unittest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "utils.h"
        -:    2:#include "dominion.h"
        -:    3:
        -:    4:int testFullDeckCount();
        -:    5:
        -:    6:/******************************************************************************
        -:    7: * UnitTest for the fullDeckCount function
        -:    8: *****************************************************************************/
        1:    9:int main()
        -:   10:{
        1:   11:    int total = 1, passed = 0;
        1:   12:    logV("[Starting unittest3] - Testing the fullDeckCount Function in Dominion.c");
        1:   13:    passed += testFullDeckCount();
        1:   14:    logV("[RESULTS unittest3] -----------------------------------------------");
        1:   15:    printResults(total, passed);
        -:   16:
        1:   17:    logV("[Ending unittest3] - Testing the fullDeckCount Function in Dominion.c\n\n");
        -:   18:}
        -:   19:
        -:   20:/******************************************************************************
        -:   21: *  Test that the count of a particular card in the deck changes if we add
        -:   22: *  or subtract them.
        -:   23: *****************************************************************************/
        1:   24:int testFullDeckCount()
        -:   25:{
        1:   26:    struct gameState *state = newGame();
        -:   27:    int i;
        1:   28:    int player = 0;
        1:   29:    int totalTests = 0, passed = 0;
        -:   30:
        1:   31:    int uniqueNumberOfCardsInGame = 28; // different cards that can be played
        1:   32:    state->deckCount[player] = uniqueNumberOfCardsInGame;
        1:   33:    state->handCount[player] = uniqueNumberOfCardsInGame;
        1:   34:    state->discardCount[player] = uniqueNumberOfCardsInGame;
        -:   35:
       29:   36:    for (int card = 1; card <= uniqueNumberOfCardsInGame; card++){
       28:   37:        state->deckCount[player] = card;
       28:   38:        state->handCount[player] = card;
       28:   39:        state->discardCount[player] = card;
       28:   40:        int total = 3 * card;
        -:   41:        char message[100];
       28:   42:        sprintf(message, "There are %d cards in the deck", total);
      434:   43:        for (i = 0; i < state->deckCount[player]; i++)
        -:   44:        {
      406:   45:            state->deck[player][i] = card;
        -:   46:        }
        -:   47:
      434:   48:        for (i = 0; i < state->handCount[player]; i++)
        -:   49:        {
      406:   50:            state->hand[player][i] = card;
        -:   51:        }
        -:   52:
      434:   53:        for (i = 0; i < state->discardCount[player]; i++)
        -:   54:        {
      406:   55:            state->discard[player][i] = card;
        -:   56:        }
        -:   57:
       28:   58:        totalTests++;
       28:   59:        passed += assertTrue((fullDeckCount(player, card, state) == total), message);
        -:   60:
        -:   61:        // confirm that removing a card from any deck decrements the count
       28:   62:        state->discard[player][0] = -1; // obvious invalid number
       28:   63:        total--;
       28:   64:        sprintf(message, "There are %d cards in the deck", total);
       28:   65:        totalTests++;
       28:   66:        passed += assertTrue((fullDeckCount(player, card, state) == total), message);
        -:   67:
       28:   68:        state->deck[player][0] = -1; // obvious invalid number
       28:   69:        total--;
       28:   70:        sprintf(message, "There are %d cards in the deck", total);
       28:   71:        totalTests++;
       28:   72:        passed += assertTrue((fullDeckCount(player, card, state) == total), message);
        -:   73:
       28:   74:        state->hand[player][0] = -1; // obvious invalid number
       28:   75:        total--;
       28:   76:        sprintf(message, "There are %d cards in the deck", total);
       28:   77:        totalTests++;
       28:   78:        passed += assertTrue((fullDeckCount(player, card, state) == total), message);
        -:   79:    }
        1:   80:    return printResults(totalTests, passed);
        -:   81:}
